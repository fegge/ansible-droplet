---
- name: Check if SSH key exists
  local_action: stat path="~/.ssh/{{ ssh_key_name }}"
  register: private_ssh_key
  
- name: Generate new SSH key
  local_action: command ssh-keygen -q -t rsa -b 2048 -N "{{ ssh_key_password }}" -f ~/.ssh/{{ ssh_key_name }} -C ""
  when: not private_ssh_key.stat.exists


- name: Register the SSH key
  digital_ocean:
    command: ssh
    state: present
    name: "{{ ssh_key_name }}"
    ssh_pub_key: "{{ lookup('file', '~/.ssh/{{ ssh_key_name }}.pub') }}"
    api_token: "{{ api_token }}"
  register: public_ssh_key

# Using unique_name ensures idempotency, and using wait 
# ensures that the droplet is online before returning
- name: Create a new droplet
  digital_ocean:
    command: droplet
    state: present
    name: "{{ droplet_name }}"
    unique_name: yes
    size_id: "{{ size_id }}"
    region_id: "{{ region_id }}"
    image_id: "{{ image_id }}"
    ssh_key_ids: "{{ public_ssh_key.ssh_key.id }}"
    api_token: "{{ api_token }}"
    wait: yes
  register: digital_ocean

- name: Add new host to inventory
  add_host:
    name: "{{ digital_ocean.droplet.ip_address }}"
    group: droplets
    ansible_ssh_user: root
    ansible_ssh_host: "{{ digital_ocean.droplet.ip_address }}"
    ansible_ssh_private_key_file: "~/.ssh/{{ ssh_key_name }}"
  when: digital_ocean.droplet is defined

# - name: Wait for droplet to come online.
#   local_action: "wait_for port=22 host={{ digital_ocean.droplet.ip_address }}"

- debug: msg="Droplet {{ digital_ocean.droplet.id }} created with SSH key {{ public_ssh_key.ssh_key.id }}."
- debug: msg="Droplet IP address is {{ digital_ocean.droplet.ip_address }}"
